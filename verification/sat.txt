#include "include/z3.h"

// #cgo LDFLAGS: -lz3
// #include "../z3.h"

/**
   \brief Demonstrates how to initialize the parser symbol table.
 */
 void parser_example2()
 {
	 Z3_context ctx = mk_context();
	 Z3_solver s = mk_solver(ctx);
	 Z3_ast x, y;
	 Z3_symbol         names[2];
	 Z3_func_decl decls[2];
	 Z3_ast_vector f;

	 printf("\nparser_example2\n");
	 LOG_MSG("parser_example2");

	 /* Z3_enable_arithmetic doesn't need to be invoked in this example
		because it will be implicitly invoked by mk_int_var.
	 */

	 x        = mk_int_var(ctx, "x");
	 decls[0] = Z3_get_app_decl(ctx, Z3_to_app(ctx, x));
	 y        = mk_int_var(ctx, "y");
	 decls[1] = Z3_get_app_decl(ctx, Z3_to_app(ctx, y));

	 names[0] = Z3_mk_string_symbol(ctx, "a");
	 names[1] = Z3_mk_string_symbol(ctx, "b");

	 f = Z3_parse_smtlib2_string(ctx,
							"(assert (> a b))",
							0, 0, 0,
							/* 'x' and 'y' declarations are inserted as 'a' and 'b' into the parser symbol table. */
							2, names, decls);
	 printf("formula: %s\n", Z3_ast_vector_to_string(ctx, f));
	 printf("assert axiom:\n%s\n", Z3_ast_vector_to_string(ctx, f));
	 for (unsigned i = 0; i < Z3_ast_vector_size(ctx, f); ++i) {
		 Z3_solver_assert(ctx, s, Z3_ast_vector_get(ctx, f, i));
	 }
	 check(ctx, s, Z3_L_TRUE);

	 del_solver(ctx, s);
	 Z3_del_context(ctx);
 }

 /**
	\brief Demonstrates how to initialize the parser symbol table.
  */
 void parser_example3()
 {
	 Z3_config  cfg;
	 Z3_context ctx;
	 Z3_solver s;
	 Z3_sort       int_sort;
	 Z3_symbol     g_name;
	 Z3_sort       g_domain[2];
	 Z3_func_decl  g;
	 Z3_ast_vector thm;

	 printf("\nparser_example3\n");
	 LOG_MSG("parser_example3");

	 cfg = Z3_mk_config();
	 /* See quantifer_example1 */
	 Z3_set_param_value(cfg, "model", "true");
	 ctx = mk_context_custom(cfg, error_handler);
	 Z3_del_config(cfg);
	 s = mk_solver(ctx);

	 /* declare function g */
	 int_sort    = Z3_mk_int_sort(ctx);
	 g_name      = Z3_mk_string_symbol(ctx, "g");
	 g_domain[0] = int_sort;
	 g_domain[1] = int_sort;
	 g           = Z3_mk_func_decl(ctx, g_name, 2, g_domain, int_sort);

	 assert_comm_axiom(ctx, s, g);

	 thm = Z3_parse_smtlib2_string(ctx,
							"(assert (forall ((x Int) (y Int)) (=> (= x y) (= (g x 0) (g 0 y)))))",
							0, 0, 0,
							1, &g_name, &g);
	 printf("formula: %s\n", Z3_ast_vector_to_string(ctx, thm));
	  (ctx, s, Z3_ast_vector_get(ctx, thm, 0), Z3_TRUE);

	 del_solver(ctx, s);
	 Z3_del_context(ctx);
 }

 /**
	\brief Demonstrates how to handle parser errors using Z3 error handling support.
 */
 void parser_example5() {
	 Z3_config  cfg;
	 Z3_context ctx = NULL;
	 Z3_solver s = NULL;
	 Z3_error_code e;

	 printf("\nparser_example5\n");
	 LOG_MSG("parser_example5");

	 if (1) {
		 cfg = Z3_mk_config();
		 ctx = mk_context_custom(cfg, nothrow_z3_error);
		 s   = mk_solver(ctx);
		 Z3_del_config(cfg);

		 Z3_parse_smtlib2_string(ctx,
								/* the following string has a parsing error: missing parenthesis */
								"(declare-const x Int) declare-const y Int) (assert (and (> x y) (> x 0)))",
								0, 0, 0,
								0, 0, 0);
		 e = Z3_get_error_code(ctx);
		 if (e != Z3_OK) goto err;
		 unreachable();
	 del_solver(ctx, s);
		 Z3_del_context(ctx);
	 }
	 else {
	 err:
		 printf("Z3 error: %s.\n", Z3_get_error_msg(ctx, e));
		 if (ctx != NULL) {
			 printf("Error message: '%s'.\n",Z3_get_parser_error(ctx));
		 del_solver(ctx, s);
			 Z3_del_context(ctx);
		 }
	 }
 }

 /**
   \brief Demonstrates how to use SMT2 parser.
*/
void smt2parser_example() {
    Z3_context ctx;
    Z3_ast_vector fs;
    printf("\nsmt2parser_example\n");
    LOG_MSG("smt2parser_example");

    ctx = mk_context();
    fs  = Z3_parse_smtlib2_string(ctx, "(declare-fun a () (_ BitVec 8)) (assert (bvuge a #x10)) (assert (bvule a #xf0))", 0, 0, 0, 0, 0, 0);
    Z3_ast_vector_inc_ref(ctx, fs);
    printf("formulas: %s\n", Z3_ast_vector_to_string(ctx, fs));
    Z3_ast_vector_dec_ref(ctx, fs);

    Z3_del_context(ctx);
}

/**
   \brief Assert the axiom: function f is commutative.

   This example uses the SMT-LIB parser to simplify the axiom construction.
*/
void assert_comm_axiom(Z3_context ctx, Z3_solver s, Z3_func_decl f)
{
    Z3_sort t;
    Z3_symbol f_name, t_name;
    Z3_ast_vector q;

    t = Z3_get_range(ctx, f);

    if (Z3_get_domain_size(ctx, f) != 2 ||
        Z3_get_domain(ctx, f, 0) != t ||
        Z3_get_domain(ctx, f, 1) != t) {
        exitf("function must be binary, and argument types must be equal to return type");
    }

    /* Inside the parser, function f will be referenced using the symbol 'f'. */
    f_name = Z3_mk_string_symbol(ctx, "f");

    /* Inside the parser, type t will be referenced using the symbol 'T'. */
    t_name = Z3_mk_string_symbol(ctx, "T");

    q = Z3_parse_smtlib2_string(ctx,
                           "(assert (forall ((x T) (y T)) (= (f x y) (f y x))))",
                           1, &t_name, &t,
                           1, &f_name, &f);
    printf("assert axiom:\n%s\n", Z3_ast_vector_to_string(ctx, q));
    for (unsigned i = 0; i < Z3_ast_vector_size(ctx, q); ++i) {
        Z3_solver_assert(ctx, s, Z3_ast_vector_get(ctx, q, i));
    }
}

